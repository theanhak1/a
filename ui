import cv2
import streamlit as st
import numpy as np

# Load the body cascade classifier
body_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_fullbody.xml')

cap = cv2.VideoCapture(1)  # Mở luồng video từ camera (sử dụng ID 0 hoặc thay bằng URL nếu cần)
# Thiết lập kích thước khung hình đầu vào
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)  # Điền vào độ rộng mong muốn
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)  # Điền vào độ cao mong muốn

# Set the desired frame rate
desired_fps = 25
frame_delay = 1.0 / desired_fps  # Calculate the time delay for the desired frame rate
enter_count = 0
exit_count = 0

# Điểm đầu và điểm cuối của đường ngang phía trên
line = [(0, 480 // 3), (640, 480 // 3)]
tracker = cv2.TrackerCSRT_create()

# Danh sách các đối tượng đang được theo dõi, bao gồm ID của từng đối tượng và trạng thái ('in' hoặc 'out')
tracking_objects = {}
next_object_id = 1  # Bắt đầu ID từ 1

# Vẽ đường ngang
def draw_line(image, line):
    cv2.line(image, line[0], line[1], (255, 0, 0), 2)
def main():
    global enter_count, exit_count, tracking_objects, cap
    st.title("Detect and Count People")

    # Open a connection to the camera (in this case, the default camera, you can change the parameter for a different camera)
    cap = cv2.VideoCapture(1)

    # Check if the camera is opened successfully
    if not cap.isOpened():
        st.error("Error: Could not open camera.")
        return

    # Set the width and height of the camera feed
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    # Create a placeholder to display the camera feed
    image_placeholder = st.empty()

    # Start the camera stream
    while True:
        # Read a frame from the camera
        ret, frame = cap.read()

        if not ret:
            st.error("Error: Failed to capture camera frame.")
            break
        frame = cv2.resize(frame, (640, 480))
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Vẽ đường ngang
        draw_line(frame, line)

        # Phát hiện người bằng body cascade classifier
        bodies = body_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=4, minSize=(40, 40), flags=cv2.CASCADE_SCALE_IMAGE)
        new_object_detected = False  # Biến để kiểm tra xem có người mới được phát hiện không

        for (x, y, w, h) in bodies:
            centroid_x = x + w // 2
            centroid_y = y + h // 2

            # Vẽ bounding box cho người
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # Vẽ centroid bằng một điểm đỏ
            cv2.circle(frame, (centroid_x, centroid_y), 4, (0, 0, 255), -1)

            # Kiểm tra xem đối tượng đã được theo dõi chưa
            tracked = False
            object_id = None
            for obj_id, values in tracking_objects.items():
                try:
                    tracker, bbox, prev_centroid, status = values
                    x1, y1, w1, h1 = bbox
                    dist = ((centroid_x - prev_centroid[0]) ** 2 + (centroid_y - prev_centroid[1]) ** 2) ** 0.5
                except:
                    continue

                if dist < 50:  # Thay đổi ngưỡng khoảng cách
                    tracked = True
                    object_id = obj_id
                    break

            if not tracked:
                # Khai báo biến next_object_id ở phạm vi toàn cục   
                next_object_id = 1  # Bắt đầu ID từ 1
                bbox = (x, y, w, h)
                tracker = cv2.TrackerCSRT_create()  # Khởi tạo tracker
                tracking_objects[next_object_id] = (tracker, bbox, (centroid_x, centroid_y), 'out')
                object_id = next_object_id
                next_object_id += 1
                new_object_detected = True  # Đã phát hiện người mới
                # Bắt đầu theo dõi
                tracker.init(frame, bbox)

            if centroid_y < line[0][1] and tracking_objects[object_id][2][1] >= line[0][1] and tracking_objects[object_id][3] != 'in':
                enter_count += 1
                tracking_objects[object_id] = (tracker, bbox, (centroid_x, centroid_y), 'in')  # Cập nhật trạng thái của đối tượng
                message = f"Người {object_id} vào. Tổng số người vào: {enter_count}"
                print(message)  # In ra terminal
            elif centroid_y > line[1][1] and tracking_objects[object_id][2][1] <= line[1][1] and tracking_objects[object_id][3] != 'out':
                exit_count += 1
                tracking_objects[object_id] = (tracker, bbox, (centroid_x, centroid_y), 'out')  # Cập nhật trạng thái của đối tượng
                message = f"Người {object_id} ra. Tổng số người ra: {exit_count}"
                print(message)  # In ra terminal

        # Cập nhật theo dõi
        for obj_id in list(tracking_objects.keys()):
            tracker, bbox, prev_centroid, status = tracking_objects[obj_id]
            success, new_bbox = tracker.update(frame)

            if success:
                (x1, y1, w1, h1) = [int(v) for v in new_bbox]
                tracking_objects[obj_id] = (tracker, new_bbox, (x1 + w1 // 2, y1 + h1 // 2), status)

        cv2.putText(frame, f"Enter: {enter_count}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.putText(frame, f"Exit: {exit_count}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        # Hiển thị ID và trạng thái của từng đối tượng
        for obj_id, (_, bbox, _, status) in tracking_objects.items():
            x1, y1, w1, h1 = bbox
            cv2.rectangle(frame, (x1, y1), (x1 + w1, y1 + h1), (0, 255, 0), 2)  # Vẽ bounding box
            cv2.putText(frame, f"ID: {str(obj_id)} - {status}", (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)  # Hiển thị ID và trạng thái
        # Display the frame in the Streamlit app
        image_placeholder.image(frame, channels="BGR", use_column_width=True)

    # Release the camera when the app is closed
    cap.release()

if __name__ == "__main__":
    main()
