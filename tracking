import cv2
import numpy as np

# Load the pre-trained Haar Cascade Classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)

# Initialize variables to keep track of detected faces and their IDs
faces = []  # List of detected faces, each element is [x, y, w, h]
face_id = 1  # Initialize face ID

while True:
    ret, frame = cap.read()

    if not ret:
        break

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Perform face detection
    new_faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Draw rectangles around detected faces
    for (x, y, w, h) in new_faces:
        # Check if the detected face is close to an existing face
        face_detected = False
        for (x0, y0, w0, h0) in faces:
            # Calculate the center of the new face
            center_x = x + w // 2
            center_y = y + h // 2
            # Calculate the center of an existing face
            center_x0 = x0 + w0 // 2
            center_y0 = y0 + h0 // 2
            # Calculate the Euclidean distance between the centers
            distance = np.sqrt((center_x - center_x0)**2 + (center_y - center_y0)**2)
            # If the distance is smaller than a threshold, consider it a duplicate
            if distance < 50:
                face_detected = True
                break
        if not face_detected:
            faces.append((x, y, w, h))
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, str(face_id), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            face_id += 1

    # Display the frame with face detection
    cv2.imshow("Face Detection with ID", frame)

    if cv2.waitKey(1) == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
